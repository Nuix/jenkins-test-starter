/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

ext {
    javaMainClass = ''
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
  
    flatDir {
        dirs 'engine/lib'
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    //implementation 'org.slf4j:slf4j-log4j12:2.0.7'

    // Nuix compile time dependencies
    implementation fileTree(dir: 'engine/lib', include: 'nuix-*.jar')

    runtimeOnly fileTree(dir: 'engine/lib', include: '*.jar')
    runtimeOnly fileTree(dir: 'engine/lib/non-fips', include: '*.jar')
}

tasks.withType(Tar.class).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip.class).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

import java.nio.file.Paths

String logDir = Paths.get(rootProject.rootDir.getAbsolutePath(), "logs")
String nuixEngineHome = Paths.get(rootProject.rootDir.getAbsolutePath(), "app/engine")
String engineBinDirectory = Paths.get(nuixEngineHome, "bin")
String engineLibDirectory = Paths.get(nuixEngineHome, "lib")
String envPath = engineBinDirectory

def username = System.properties['nuix.license.server.username'] ?: project['nuix.license.server.username'] ?: ""
def password = System.properties['nuix.license.server.password'] ?: project['nuix.license.server.password'] ?: ""
def licenseShortName = System.properties['nuix.license.shortname'] ?: project['nuix.license.shortname'] ?: ""
def nuixRegistryServers = System.properties['nuix.registry.servers'] ?: project['nuix.registry.servers'] ?: ""
def nuixLicenseSource = System.properties['nuix.license.source'] ?: project['nuix.license.source'] ?: "server"
def workerCount = System.properties['workerCount'] ?: project.workerCount ?: 2

applicationDefaultJvmArgs=[
        "-Xmx12g",
        "-Dnuix.logdir=${logDir}",
        "-Dnuix.libdir=${engineLibDirectory}",
        "-Dnuix.engine.userDataDirs=${nuixEngineHome}/user-data,${nuixEngineHome}/user-data-extra",
        "-Djava.library.path=${nuixEngineHome}/bin:${nuixEngineHome}/lib",
        "-Dnuix.engine.path=${nuixEngineHome}",
        "-Dnuix.worker.jvm.arguments=-Dlog4j.configuration=file:${nuixEngineHome}/config/log4j2.yml",
        "-Dnuix.license.server.username=${username}",
        "-Dnuix.license.server.password=${password}",
        "-Dnuix.license.shortname=${licenseShortName}",
        "-Dnuix.registry.servers=${nuixRegistryServers}",
        "-Dnuix.license.source=${nuixLicenseSource}",
        "-DworkerCount=${workerCount}"
]

run {
    systemProperties System.properties
    javaMainClass = project.getProperty('mainClassName') ?: 'com.nuix.examples.LicenseAcquisition'
}

application {
    // Define the main class for the application.
    mainClass = javaMainClass
}

test {
    jvmArgs=applicationDefaultJvmArgs
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
